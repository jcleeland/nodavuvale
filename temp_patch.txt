<?php /**  * Timeline tab content for individual profile.  *  * Renders a vertical, scrollable timeline with life events, family milestones,  * and optional facts/events drawn from the individual's record.  *  * Expected global context (provided by individual.php):  * - $individual (array)  * - $items (array)  * - $parents (array)  * - $children (array)  */  $nvTimelineDebug = isset($_GET['timeline_debug']) && $_GET['timeline_debug'] !== '' && $_GET['timeline_debug'] !== '0';  if (!isset($individual) || !is_array($individual)) {     echo '<div class="p-4 text-sm text-red-600">Timeline data is currently unavailable.</div>';     return; }  if (!function_exists('nvTimelineFormatName')) {     /**      * Create a friendly display name for an individual array.      */     function nvTimelineFormatName(array $person): string     {         $first = isset($person['first_names']) ? str_replace('_', ' ', trim((string) $person['first_names'])) : '';         $last = isset($person['last_name']) ? str_replace('_', ' ', trim((string) $person['last_name'])) : '';         $name = trim($first . ' ' . $last);         return $name !== '' ? $name : 'Unknown';     }      /**      * Build a date representation (with inferred precision) from Y/M/D integers.      *      * @return array{date: DateTimeImmutable, label: string, precision: string}|null      */     function nvTimelineCreateDateFromParts(?int $year, ?int $month, ?int $day): ?array     {         global $nvTimelineDebug;          if (empty($year)) {             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_parts skipped: missing year; parts=' . json_encode([$year, $month, $day], JSON_PARTIAL_OUTPUT_ON_ERROR));             }             return null;         }          $hasMonth = !empty($month) && $month >= 1 && $month <= 12;         $hasDay = $hasMonth && !empty($day) && $day >= 1;          $month = $hasMonth ? (int) $month : 7;         $maxDay = cal_days_in_month(CAL_GREGORIAN, $month, (int) $year);         $day = $hasDay ? min((int) $day, $maxDay) : (int) ceil($maxDay / 2);          $dateString = sprintf('%04d-%02d-%02d', (int) $year, $month, $day);         try {             $date = new DateTimeImmutable($dateString);         } catch (Exception $exception) {             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_parts exception: ' . $exception->getMessage() . '; parts=' . json_encode([$year, $month, $day], JSON_PARTIAL_OUTPUT_ON_ERROR));             }             return null;         }          if ($hasDay) {             $result = [                 'date' => $date,                 'label' => $date->format('j M Y'),                 'precision' => 'day',             ];             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_parts resolved (day): ' . json_encode([$year, $month, $day, $result['label']], JSON_PARTIAL_OUTPUT_ON_ERROR));             }             return $result;         }          if ($hasMonth) {             $result = [                 'date' => $date,                 'label' => $date->format('M Y'),                 'precision' => 'month',             ];             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_parts resolved (month): ' . json_encode([$year, $month, $day, $result['label']], JSON_PARTIAL_OUTPUT_ON_ERROR));             }             return $result;         }          $result = [             'date' => $date,             'label' => $date->format('Y'),             'precision' => 'year',         ];         if ($nvTimelineDebug) {             error_log('[timeline-debug] date_from_parts resolved (year): ' . json_encode([$year, $month, $day, $result['label']], JSON_PARTIAL_OUTPUT_ON_ERROR));         }         return $result;     }      /**      * Build a date representation from a free-form string (YYYY, YYYY-MM, YYYY-MM-DD).      *      * @param string|null $raw      * @return array{date: DateTimeImmutable, label: string, precision: string}|null      */     function nvTimelineCreateDateFromString(?string $raw): ?array     {         global $nvTimelineDebug;          if ($raw === null) {             return null;         }          $value = trim((string) $raw);         if ($value === '') {             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_string skipped: empty value');             }             return null;         }          if (preg_match('/^\d{4}$/', $value)) {             $date = DateTimeImmutable::createFromFormat('!Y-m-d', $value . '-07-01');             if ($date) {                 $result = [                     'date' => $date,                     'label' => $date->format('Y'),                     'precision' => 'year',                 ];                 if ($nvTimelineDebug) {                     error_log('[timeline-debug] date_from_string resolved (year): ' . $value . ' => ' . $result['label']);                 }                 return $result;             }         }          if (preg_match('/^\d{4}-\d{2}$/', $value)) {             $date = DateTimeImmutable::createFromFormat('!Y-m-d', $value . '-15');             if ($date) {                 $result = [                     'date' => $date,                     'label' => $date->format('M Y'),                     'precision' => 'month',                 ];                 if ($nvTimelineDebug) {                     error_log('[timeline-debug] date_from_string resolved (month): ' . $value . ' => ' . $result['label']);                 }                 return $result;             }         }          if (preg_match('/^\d{4}-\d{2}-\d{2}$/', $value)) {             $date = DateTimeImmutable::createFromFormat('!Y-m-d', $value);             if ($date) {                 $result = [                     'date' => $date,                     'label' => $date->format('j M Y'),                     'precision' => 'day',                 ];                 if ($nvTimelineDebug) {                     error_log('[timeline-debug] date_from_string resolved (day): ' . $value . ' => ' . $result['label']);                 }                 return $result;             }         }          try {             $date = new DateTimeImmutable($value);         } catch (Exception $exception) {             if ($nvTimelineDebug) {                 error_log('[timeline-debug] date_from_string exception: ' . $exception->getMessage() . ' for value ' . $value);             }             return null;         }          $result = [             'date' => $date,             'label' => $date->format('j M Y'),             'precision' => 'day',         ];         if ($nvTimelineDebug) {             error_log('[timeline-debug] date_from_string fallback resolved: ' . $value . ' => ' . $result['label']);         }          return $result;     }      /**      * Compare two timeline dates.      *      * @return int -1 when $a is earlier, 1 when $a is later, 0 when identical.      */     function nvTimelineCompareDates(?DateTimeImmutable $a, ?DateTimeImmutable $b): int     {         if ($a === null && $b === null) {             return 0;         }         if ($a === null) {             return 1;         }         if ($b === null) {             return -1;         }          $primary = strcmp($a->format('Y-m-d H:i:s'), $b->format('Y-m-d H:i:s'));         if ($primary !== 0) {             return $primary;         }          return strcmp($a->format('u'), $b->format('u'));     }      /**      * Extract commonly used details from an item group.      *      * @param array $group      * @return array<string,array<int,array<string,mixed>>>      */     function nvTimelineIndexGroupItems(array $group): array     {         $indexed = [];         foreach ($group['items'] ?? [] as $item) {             $type = $item['detail_type'] ?? '';             if ($type === '') {                 continue;             }             $indexed[$type][] = $item;         }         return $indexed;     }      /**      * Locate the first detail value for the given type list.      *      * @param array<string,array<int,array<string,mixed>>> $indexed      * @param array<int,string> $types      */     function nvTimelineExtractDetail(array $indexed, array $types): ?array     {         foreach ($types as $type) {             if (!empty($indexed[$type][0])) {                 return $indexed[$type][0];             }         }         return null;     } }  $personName = nvTimelineFormatName($individual); $individualId = (int) ($individual['id'] ?? 0);  $birthInfo = nvTimelineCreateDateFromParts(     $individual['birth_year'] ?? null,     $individual['birth_month'] ?? null,     $individual['birth_date'] ?? null );  $deathInfo = nvTimelineCreateDateFromParts(     $individual['death_year'] ?? null,     $individual['death_month'] ?? null,     $individual['death_date'] ?? null );  $assumedBirth = false; $assumedDeath = false;  if (!$birthInfo && $deathInfo) {     $fallbackDate = $deathInfo['date']->sub(new DateInterval('P82Y'));     $birthInfo = [         'date' => $fallbackDate,         'label' => $fallbackDate->format('Y'),         'precision' => 'year',     ];     $assumedBirth = true; }  if (!$deathInfo && $birthInfo) {     $fallbackDate = $birthInfo['date']->add(new DateInterval('P82Y'));     $deathInfo = [         'date' => $fallbackDate,         'label' => $fallbackDate->format('Y'),         'precision' => 'year',     ];     $assumedDeath = true; }  if (!$birthInfo && !$deathInfo) {     $now = new DateTimeImmutable('now');     $birthInfo = [         'date' => $now->sub(new DateInterval('P50Y')),         'label' => $now->sub(new DateInterval('P50Y'))->format('Y'),         'precision' => 'year',     ];     $deathInfo = [         'date' => $now->add(new DateInterval('P50Y')),         'label' => $now->add(new DateInterval('P50Y'))->format('Y'),         'precision' => 'year',     ];     $assumedBirth = true;     $assumedDeath = true; }  $now = isset($now) ? $now : new DateTimeImmutable('now');  if ($deathInfo && $birthInfo) {     $deathDate = $deathInfo['date'] ?? null;     $birthDate = $birthInfo['date'] ?? null;      if ($deathDate instanceof DateTimeImmutable && $birthDate instanceof DateTimeImmutable) {         if (nvTimelineCompareDates($deathDate, $birthDate) <= 0) {             $adjusted = $birthDate->add(new DateInterval('P1Y'));             $deathInfo['date'] = $adjusted;             $deathInfo['label'] = $adjusted->format('Y');             $deathInfo['precision'] = 'year';         }     } }  if ($assumedDeath && $deathInfo) {     $deathDate = $deathInfo['date'] ?? null;     if ($deathDate instanceof DateTimeImmutable && $now instanceof DateTimeImmutable) {         if (nvTimelineCompareDates($deathDate, $now) > 0) {             $deathInfo = null;             $assumedDeath = false;         }     } }  $timelineEvents = []; $deathEventIncluded = false;  $birthDetails = null; $deathDetails = null; $itemGroupsByName = [];  foreach ($items ?? [] as $group) {     $groupName = $group['item_group_name'] ?? '';     if ($groupName === '') {         continue;     }      $itemGroupsByName[$groupName][] = $group;      if ($groupName === 'Birth') {         $birthDetails = $group;     }     if ($groupName === 'Death') {         $deathDetails = $group;     } }  if ($birthInfo) {     $birthIndexed = $birthDetails ? nvTimelineIndexGroupItems($birthDetails) : [];     $birthLocation = nvTimelineExtractDetail($birthIndexed, ['Location']);     $birthLocationText = $birthLocation['detail_value'] ?? null;      $timelineEvents[] = [         'id' => 'nv-birth-' . $individualId,         'category' => 'personal',         'scope' => 'self',         'icon' => 'fa-solid fa-cake-candles',         'title' => 'Birth of ' . $personName,         'description' => $birthLocationText ? 'Born in ' . $birthLocationText : 'Birth recorded for ' . $personName,         'date' => $birthInfo['date'],         'display_date' => $birthInfo['label'],         'assumed' => $assumedBirth,     ]; }  if ($deathInfo) {     $deathIndexed = $deathDetails ? nvTimelineIndexGroupItems($deathDetails) : [];     $deathLocation = nvTimelineExtractDetail($deathIndexed, ['Location']);     $deathLocationText = $deathLocation['detail_value'] ?? null;      $deathTitle = $assumedDeath         ? 'Estimated passing of ' . $personName         : 'Passing of ' . $personName;      $deathDescriptionParts = [];      if ($deathLocationText) {         $deathDescriptionParts[] = 'Remembered in ' . $deathLocationText;     }      if ($assumedDeath) {         $deathDescriptionParts[] = 'Date estimated using a 100-year lifespan';     }      $deathDescription = $deathDescriptionParts         ? implode(' - ', $deathDescriptionParts)         : ($assumedDeath             ? 'Estimated date for the end of ' . $personName . '\'s lifespan'             : 'Death recorded for ' . $personName);      if ($assumedDeath) {         $deathDateCheck = $deathInfo['date'] ?? null;         $nowCheck = $now instanceof DateTimeImmutable ? $now : new DateTimeImmutable('now');         if ($deathDateCheck instanceof DateTimeImmutable && nvTimelineCompareDates($deathDateCheck, $nowCheck) > 0) {             $deathInfo = null;             $assumedDeath = false;         }     }      if ($deathInfo) {         $timelineEvents[] = [             'id' => 'nv-death-' . $individualId,             'category' => 'personal',             'scope' => 'self',             'icon' => 'fa-solid fa-dove',             'title' => $deathTitle,             'description' => $deathDescription,             'date' => $deathInfo['date'],             'display_date' => $deathInfo['label'],             'assumed' => $assumedDeath,         ];         $deathEventIncluded = true;     } }  foreach ($itemGroupsByName['Marriage'] ?? [] as $marriageGroup) {     $indexed = nvTimelineIndexGroupItems($marriageGroup);     $spouseDetail = nvTimelineExtractDetail($indexed, ['Spouse']);     $locationDetail = nvTimelineExtractDetail($indexed, ['Location']);     $dateDetail = nvTimelineExtractDetail($indexed, ['Date', 'Started']);      $eventDate = null;     if ($dateDetail && !empty($dateDetail['detail_value'])) {         $eventDate = nvTimelineCreateDateFromString((string) $dateDetail['detail_value']);     } elseif (!empty($marriageGroup['sortDate'])) {         $eventDate = nvTimelineCreateDateFromString((string) $marriageGroup['sortDate']);     }      if (!$eventDate) {         continue;     }      $spouseName = $spouseDetail['individual_name'] ?? $spouseDetail['detail_value'] ?? 'Spouse';     $location = $locationDetail['detail_value'] ?? null;      $timelineEvents[] = [         'id' => 'nv-marriage-' . ($marriageGroup['items'][0]['item_identifier'] ?? uniqid('', true)),         'category' => 'family',         'scope' => 'marriage',         'icon' => 'fa-solid fa-ring',         'title' => 'Married ' . $spouseName,         'description' => $location ? 'Celebrated in ' . $location : 'Marriage recorded with ' . $spouseName,         'date' => $eventDate['date'],         'display_date' => $eventDate['label'],         'assumed' => false,     ]; }  // Debug: timeline instrumentation (remove once ordering issue is solved) if ($nvTimelineDebug && !empty($children)) {     error_log('[timeline-debug] raw children payload: ' . print_r($children, true)); }  foreach ($children ?? [] as $child) {     $childDate = nvTimelineCreateDateFromParts(         $child['birth_year'] ?? null,         $child['birth_month'] ?? null,         $child['birth_date'] ?? null     );      if (!$childDate) {         continue;     }      $childName = nvTimelineFormatName($child);     $otherParent = null;     if (!empty($child['other_parents'][0])) {         $otherParent = nvTimelineFormatName($child['other_parents'][0]);     }      $timelineEvents[] = [         'id' => 'nv-child-' . ($child['id'] ?? uniqid('', true)),         'category' => 'family',         'scope' => 'child',         'icon' => 'fa-solid fa-baby',         'title' => $childName . ' was born',         'description' => $otherParent             ? 'Welcomed with ' . $otherParent             : 'Child of ' . $personName,         'date' => $childDate['date'],         'display_date' => $childDate['label'],         'assumed' => false,     ]; }  foreach ($parents ?? [] as $parent) {     $parentDeath = nvTimelineCreateDateFromParts(         $parent['death_year'] ?? null,         $parent['death_month'] ?? null,         $parent['death_date'] ?? null     );      if (!$parentDeath) {         continue;     }      $parentName = nvTimelineFormatName($parent);      $timelineEvents[] = [         'id' => 'nv-parent-' . ($parent['id'] ?? uniqid('', true)),         'category' => 'family',         'scope' => 'parent',         'icon' => 'fa-solid fa-people-roof',         'title' => $parentName . ' passed away',         'description' => 'Parent of ' . $personName,         'date' => $parentDeath['date'],         'display_date' => $parentDeath['label'],         'assumed' => false,     ]; }  $dateDetailTypes = ['Date', 'Started', 'Arrival', 'Departure', 'Ended']; $ignoredFactGroups = ['Private', 'Birth', 'Death', 'Marriage', 'Key Image'];  foreach ($items ?? [] as $group) {     $groupName = $group['item_group_name'] ?? '';     if ($groupName === '' || in_array($groupName, $ignoredFactGroups, true)) {         continue;     }      $indexed = nvTimelineIndexGroupItems($group);     $dateDetail = nvTimelineExtractDetail($indexed, $dateDetailTypes);      $eventDate = null;     if ($dateDetail && !empty($dateDetail['detail_value'])) {         $eventDate = nvTimelineCreateDateFromString((string) $dateDetail['detail_value']);     } elseif (!empty($group['sortDate'])) {         $eventDate = nvTimelineCreateDateFromString((string) $group['sortDate']);     }      if (!$eventDate) {         continue;     }      $descriptionParts = [];     foreach ($indexed as $type => $details) {         if (in_array($type, $dateDetailTypes, true)) {             continue;         }         $detail = $details[0];         if (!empty($detail['individual_name'])) {             $descriptionParts[] = $detail['individual_name'];         } elseif (!empty($detail['detail_value']) && !filter_var($detail['detail_value'], FILTER_VALIDATE_URL)) {             $descriptionParts[] = $detail['detail_value'];         }     }      $timelineEvents[] = [         'id' => 'nv-fact-' . ($group['items'][0]['item_identifier'] ?? uniqid('', true)),         'category' => 'facts',         'scope' => 'fact',         'icon' => 'fa-solid fa-scroll',         'title' => $groupName,         'description' => $descriptionParts ? implode(' - ', array_slice($descriptionParts, 0, 2)) : 'Recorded event for ' . $personName,         'date' => $eventDate['date'],         'display_date' => $eventDate['label'],         'assumed' => false,     ]; }  usort($timelineEvents, static function (array $a, array $b): int {     $aDate = $a['date'] instanceof DateTimeImmutable ? $a['date'] : null;     $bDate = $b['date'] instanceof DateTimeImmutable ? $b['date'] : null;      $dateComparison = nvTimelineCompareDates($aDate, $bDate);     if ($dateComparison !== 0) {         return $dateComparison;     }      return strcmp($a['title'] ?? '', $b['title'] ?? ''); });  // Debug: timeline instrumentation (remove once ordering issue is solved) if ($nvTimelineDebug) {     echo '<div class="mb-4 rounded-lg border border-amber-300 bg-amber-50 p-4 text-xs text-slate-700">';     echo '<strong>Timeline debug order</strong><br>';     foreach ($timelineEvents as $event) {         $raw = $event['date'] instanceof DateTimeImmutable             ? $event['date']->format('Y-m-d')             : (is_object($event['date']) ? get_class($event['date']) : (is_scalar($event['date']) ? (string) $event['date'] : gettype($event['date'])));         printf(             '<div>%s | %s | %s | %s</div>',             htmlspecialchars((string) ($event['id'] ?? '?'), ENT_QUOTES),             htmlspecialchars((string) ($event['category'] ?? '?'), ENT_QUOTES),             htmlspecialchars((string) ($event['display_date'] ?? '?'), ENT_QUOTES),             htmlspecialchars($raw, ENT_QUOTES)         );     }     echo '</div>'; }  $firstOriginalEvent = $timelineEvents[0] ?? null; $lastOriginalEvent = !empty($timelineEvents) ? $timelineEvents[count($timelineEvents) - 1] : null;  $rangeStartLabel = $birthInfo['label'] ?? ($firstOriginalEvent['display_date'] ?? ''); $rangeEndLabel = '';  if ($deathEventIncluded && $deathInfo) {     $rangeEndLabel = $deathInfo['label']; } elseif ($lastOriginalEvent && !empty($lastOriginalEvent['display_date'])) {     $rangeEndLabel = $lastOriginalEvent['display_date']; }  if (!$rangeEndLabel) {     $rangeEndLabel = 'Present'; }  if (!$rangeStartLabel) {     $rangeStartLabel = $rangeEndLabel !== 'Present' ? $rangeEndLabel : $personName; }  if ($rangeStartLabel === $rangeEndLabel) {     $rangeLabel = $rangeStartLabel; } else {     $rangeLabel = trim($rangeStartLabel . ' - ' . $rangeEndLabel, ' -');     if ($rangeLabel === '') {         $rangeLabel = 'Timeline';     } }  $renderEvents = [];  if (!empty($timelineEvents)) {     $currentY = 56.0;     $minSpacing = 160.0;     $maxSpacing = 340.0;     $yearFactor = 16.0;     $breakThresholdYears = 12.0;     $previousDate = null;     $lastNonBreakSide = 'left';     $lastNonBreakPosition = null;      foreach ($timelineEvents as $index => $event) {         if ($index === 0) {             $event['position'] = $currentY;             $event['initial_visibility'] = $event['category'] !== 'facts';             $event['side'] = 'left';             $renderEvents[] = $event;             $previousDate = $event['date'];             $lastNonBreakSide = $event['side'];             $lastNonBreakPosition = $event['position'];             continue;         }          $yearsDiffRaw = $previousDate             ? max(0.0, $previousDate->diff($event['date'])->days / 365.25)             : 0.0;         $adjustedDiff = $yearsDiffRaw;          if ($previousDate && $yearsDiffRaw > $breakThresholdYears) {             $currentY += $minSpacing * 0.6;             $startYear = $previousDate->format('Y');             $endYear = $event['date']->format('Y');             $breakEvent = [                 'id' => 'nv-break-' . $event['id'],                 'category' => 'break',                 'scope' => 'break',                 'icon' => 'fa-solid fa-ellipsis',                 'title' => 'Time skips ahead',                 'description' => 'Approximately ' . (int) round($yearsDiffRaw) . ' years pass without recorded events.',                 'date' => $previousDate,                 'display_date' => ($startYear && $endYear) ? $startYear . ' - ' . $endYear : '',                 'assumed' => false,                 'position' => $currentY,                 'initial_visibility' => true,                 'is_break' => true,                 'side' => 'center',             ];             $renderEvents[] = $breakEvent;             $currentY += $minSpacing * 0.55;             $adjustedDiff = max(0.0, $yearsDiffRaw - ($breakThresholdYears * 0.65));         }          $spacing = max($minSpacing, min($maxSpacing, $adjustedDiff * $yearFactor));         $currentY += $spacing;          $event['position'] = $currentY;         $event['initial_visibility'] = $event['category'] !== 'facts';          if (($event['scope'] ?? '') === 'break') {             $event['side'] = 'center';         } else {             $shouldAlternate = $lastNonBreakPosition !== null                 && ($event['position'] - $lastNonBreakPosition) < 240.0;             if ($shouldAlternate) {                 $event['side'] = $lastNonBreakSide === 'left' ? 'right' : 'left';             } else {                 $event['side'] = 'left';             }             $lastNonBreakSide = $event['side'];             $lastNonBreakPosition = $event['position'];         }          $renderEvents[] = $event;          $previousDate = $event['date'];     } }  if (!empty($renderEvents)) {     $lastRenderEvent = $renderEvents[count($renderEvents) - 1];     $canvasHeight = (int) max(420, ceil($lastRenderEvent['position'] + 220)); } else {     $canvasHeight = 480; }  // Debug: inspect rendered events with calculated positions (remove when resolved) if ($nvTimelineDebug && !empty($renderEvents)) {     echo '<div class="mb-4 rounded-lg border border-sky-300 bg-sky-50 p-4 text-xs text-slate-700">';     echo '<strong>Timeline render positions</strong><br>';     foreach ($renderEvents as $index => $event) {         $raw = $event['date'] instanceof DateTimeImmutable             ? $event['date']->format('Y-m-d')             : (is_object($event['date']) ? get_class($event['date']) : (is_scalar($event['date']) ? (string) $event['date'] : gettype($event['date'])));         printf(             '<div>#%d %s | pos=%0.2f | %s | %s</div>',             $index,             htmlspecialchars((string) ($event['id'] ?? '?'), ENT_QUOTES),             (float) ($event['position'] ?? 0.0),             htmlspecialchars((string) ($event['display_date'] ?? '?'), ENT_QUOTES),             htmlspecialchars($raw, ENT_QUOTES)         );     }     echo '</div>'; }  $timelineRootId = 'nv-timeline-root-' . $individualId;  if (!defined('NV_TIMELINE_STYLES_LOADED')) {     define('NV_TIMELINE_STYLES_LOADED', true);     ?>     <style>         .nv-timeline-scroll {             backdrop-filter: blur(6px);         }         .nv-timeline-wrapper {             position: relative;             padding: 4rem 6rem;         }         .nv-timeline-axis {             position: absolute;             top: 4rem;             bottom: 4rem;             left: 50%;             transform: translateX(-50%);             width: 4px;             border-radius: 9999px;             background: linear-gradient(180deg, rgba(16, 185, 129, 0.82), rgba(14, 165, 233, 0.82));             box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.35);         }         .nv-timeline-event {             position: absolute;             width: 100%;             transform: translateY(-50%);             display: flex;         }         .nv-timeline-event[data-side="left"] {             justify-content: flex-end;             padding-right: calc(50% + 3.5rem);         }         .nv-timeline-event[data-side="right"] {             justify-content: flex-start;             padding-left: calc(50% + 3.5rem);         }         .nv-timeline-event[data-side="center"] {             justify-content: center;             padding: 0 20%;         }         @media (max-width: 1024px) {             .nv-timeline-wrapper {                 padding: 3rem 2.5rem;             }             .nv-timeline-axis {                 left: 2.5rem;                 transform: none;             }             .nv-timeline-event {                 width: 100%;                 left: 0 !important;                 padding: 0 2.5rem !important;                 justify-content: flex-start;             }             .nv-timeline-event .nv-timeline-card {                 text-align: left !important;                 border-right: 0 !important;                 border-left: 4px solid var(--nv-timeline-accent) !important;                 width: 100%;             }             .nv-timeline-pin {                 left: 2.5rem;                 transform: translate(-50%, -50%);             }         }         .nv-timeline-pin {             position: absolute;             top: 0;             left: 50%;             transform: translate(-50%, -50%);             width: 2.6rem;             height: 2.6rem;             border-radius: 9999px;             display: flex;             align-items: center;             justify-content: center;             background: #ffffff;             color: #0f172a;             box-shadow: 0 12px 22px rgba(15, 23, 42, 0.14);             border: 3px solid rgba(148, 163, 184, 0.35);             z-index: 1200;         }         .nv-timeline-event[data-category="personal"] .nv-timeline-pin {             background: linear-gradient(145deg, #10b981, #047857);             color: #f0fdf4;             border-color: rgba(16, 185, 129, 0.65);         }         .nv-timeline-event[data-category="family"] .nv-timeline-pin {             background: linear-gradient(145deg, #0ea5e9, #2563eb);             color: #f8fafc;             border-color: rgba(14, 165, 233, 0.65);         }         .nv-timeline-event[data-category="facts"] .nv-timeline-pin {             background: linear-gradient(145deg, #f59e0b, #f97316);             color: #fff7ed;             border-color: rgba(249, 115, 22, 0.65);         }         .nv-timeline-event {             --nv-timeline-accent: rgba(226, 232, 240, 0.78);         }         .nv-timeline-event[data-category="personal"] {             --nv-timeline-accent: rgba(5, 150, 105, 0.8);         }         .nv-timeline-event[data-category="family"] {             --nv-timeline-accent: rgba(37, 99, 235, 0.75);         }         .nv-timeline-event[data-category="facts"] {             --nv-timeline-accent: rgba(234, 88, 12, 0.75);         }         .nv-timeline-card {             margin: 0;             padding: 0.85rem 1.05rem;             border-radius: 0.9rem;             background: linear-gradient(135deg, rgba(255, 255, 255, 0.97), rgba(241, 245, 249, 0.94));             box-shadow: 0 16px 28px rgba(15, 23, 42, 0.09);             border-left: 4px solid var(--nv-timeline-accent);             width: min(32rem, 100%);         }         .nv-timeline-event[data-side="left"] .nv-timeline-card {             border-left: 0;             border-right: 4px solid var(--nv-timeline-accent);             text-align: right;         }         .nv-timeline-event[data-side="left"] .nv-timeline-card > .flex {             flex-direction: row-reverse;         }         .nv-timeline-event[data-side="left"] .nv-timeline-chip {             margin-left: auto;         }         .nv-timeline-event[data-side="right"] .nv-timeline-card {             text-align: left;         }         .nv-timeline-card h4 {             font-size: 1.05rem;             line-height: 1.35rem;         }         .nv-timeline-card p {             font-size: 0.9rem;         }         .nv-timeline-event[data-scope="break"] .nv-timeline-pin {             background: linear-gradient(145deg, #e2e8f0, #cbd5f5);             color: #475569;             border-color: rgba(148, 163, 184, 0.65);         }         .nv-timeline-event[data-scope="break"] {             --nv-timeline-accent: rgba(148, 163, 184, 0.55);         }         .nv-timeline-event[data-scope="break"] .nv-timeline-card {             text-align: center;             background: linear-gradient(135deg, rgba(248, 250, 252, 0.95), rgba(226, 232, 240, 0.95));             width: min(38rem, 100%);         }         .nv-timeline-event[data-scope="break"] .nv-timeline-card h4 {             text-transform: uppercase;             letter-spacing: 0.08em;             font-size: 0.9rem;             color: #475569;         }         .nv-timeline-break-range {             display: inline-block;             font-size: 0.75rem;             letter-spacing: 0.08em;             text-transform: uppercase;             color: #64748b;             padding-bottom: 0.5rem;         }         .nv-timeline-chip {             display: inline-flex;             align-items: center;             gap: 0.375rem;             font-size: 0.75rem;             text-transform: uppercase;             letter-spacing: 0.05em;             padding: 0.25rem 0.65rem;             border-radius: 9999px;             font-weight: 600;             background: rgba(15, 23, 42, 0.08);             color: #1e293b;         }         .nv-timeline-event[data-category="personal"] .nv-timeline-chip {             background: rgba(16, 185, 129, 0.12);             color: #0f766e;         }         .nv-timeline-event[data-category="family"] .nv-timeline-chip {             background: rgba(59, 130, 246, 0.12);             color: #1d4ed8;         }         .nv-timeline-event[data-category="facts"] .nv-timeline-chip {             background: rgba(249, 115, 22, 0.12);             color: #b45309;         }         .nv-timeline-muted {             color: #64748b;             font-size: 0.875rem;         }         .nv-timeline-empty {             border: 1px dashed rgba(148, 163, 184, 0.6);             border-radius: 1rem;             padding: 2.5rem;             text-align: center;             background: rgba(248, 250, 252, 0.8);             color: #475569;         }     </style>     <?php }  ?> <div id="<?= htmlspecialchars($timelineRootId, ENT_QUOTES) ?>" class="space-y-6">     <div class="flex flex-wrap items-center justify-between gap-4 rounded-2xl bg-white/90 p-6 shadow-lg ring-1 ring-slate-100">         <div>             <h3 class="text-2xl font-semibold text-slate-800">Life Timeline</h3>             <p class="text-sm text-slate-500"><?= htmlspecialchars($rangeLabel, ENT_QUOTES) ?> - <?= htmlspecialchars($personName, ENT_QUOTES) ?></p>         </div>         <div class="flex flex-wrap items-center gap-6 text-sm text-slate-600">             <label class="flex items-center gap-2 font-medium">                 <input type="checkbox" class="h-4 w-4 rounded border-slate-300 text-emerald-600 focus:ring-emerald-500 nv-timeline-toggle" data-timeline-toggle="family" checked>                 Include other family members             </label>             <label class="flex items-center gap-2 font-medium">                 <input type="checkbox" class="h-4 w-4 rounded border-slate-300 text-amber-600 focus:ring-amber-500 nv-timeline-toggle" data-timeline-toggle="facts">                 Include Facts &amp; Events             </label>         </div>     </div>      <div class="nv-timeline-scroll overflow-y-auto rounded-2xl bg-white/80 p-8 shadow-xl ring-1 ring-slate-100" style="max-height: 72vh;">         <?php if (empty($timelineEvents)): ?>             <div class="nv-timeline-empty">                 <div class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-slate-100 text-slate-400">                     <i class="fa-solid fa-feather"></i>                 </div>                 <h4 class="text-lg font-semibold text-slate-700">No timeline entries yet</h4>                 <p class="mt-2 text-sm text-slate-500">                     As you add marriages, children, or documented events for <?= htmlspecialchars($personName, ENT_QUOTES) ?>,                     their story will unfold here.                 </p>             </div>         <?php else: ?>             <div class="nv-timeline-wrapper">                 <div class="nv-timeline-axis"></div>                 <div class="relative" style="height: <?= $canvasHeight ?>px;">                     <?php foreach ($renderEvents as $eventIndex => $event): ?>                         <?php                             $category = $event['category'] ?? 'personal';                             $scope = $event['scope'] ?? 'self';                             $initialVisible = $event['initial_visibility'] ?? true;                             $styleFragments = [                                 'top: ' . sprintf('%.2f', (float) ($event['position'] ?? 0)) . 'px',                                 'z-index: ' . (1000 - $eventIndex)                             ];                             if (!$initialVisible) {                                 $styleFragments[] = 'opacity:0';                                 $styleFragments[] = 'visibility:hidden';                                 $styleFragments[] = 'pointer-events:none';                             }                             $styleAttribute = implode(';', $styleFragments) . ';';                         ?>                         <div                             class="nv-timeline-event transition-opacity duration-300"                             data-category="<?= htmlspecialchars($category, ENT_QUOTES) ?>"                             data-scope="<?= htmlspecialchars($scope, ENT_QUOTES) ?>"                             data-side="<?= htmlspecialchars($event['side'] ?? 'left', ENT_QUOTES) ?>"                             style="<?= $styleAttribute ?>"                         >                             <div class="nv-timeline-pin">                                 <i class="<?= htmlspecialchars($event['icon'], ENT_QUOTES) ?> text-lg"></i>                             </div>                             <?php if ($scope === 'break'): ?>                                 <div class="nv-timeline-card">                                     <?php if (!empty($event['display_date'])): ?>                                         <span class="nv-timeline-break-range"><?= htmlspecialchars($event['display_date'], ENT_QUOTES) ?></span>                                     <?php endif; ?>                                     <h4 class="font-semibold"><?= htmlspecialchars($event['title'], ENT_QUOTES) ?></h4>                                     <?php if (!empty($event['description'])): ?>                                         <p class="mt-2 nv-timeline-muted"><?= htmlspecialchars($event['description'], ENT_QUOTES) ?></p>                                     <?php endif; ?>                                 </div>                             <?php else: ?>                                 <div class="nv-timeline-card">                                     <div class="flex flex-wrap items-center justify-between gap-3">                                         <span class="nv-timeline-chip">                                             <?php if ($scope === 'self'): ?>                                                 Life Event                                             <?php elseif ($scope === 'marriage'): ?>                                                 Marriage                                             <?php elseif ($scope === 'child'): ?>                                                 Child                                             <?php elseif ($scope === 'parent'): ?>                                                 Parent                                             <?php else: ?>                                                 Fact                                             <?php endif; ?>                                         </span>                                         <span class="font-semibold text-slate-600">                                             <?= htmlspecialchars($event['display_date'], ENT_QUOTES) ?>                                             <?php if (!empty($event['assumed'])): ?>                                                 <span class="ml-2 inline-flex items-center gap-1 rounded-full bg-amber-100 px-2 py-0.5 text-xs font-semibold text-amber-700">                                                     <i class="fa-solid fa-triangle-exclamation"></i>                                                     Estimated                                                 </span>                                             <?php endif; ?>                                         </span>                                     </div>                                     <h4 class="mt-4 text-xl font-semibold text-slate-800"><?= htmlspecialchars($event['title'], ENT_QUOTES) ?></h4>                                     <?php if (!empty($event['description'])): ?>                                         <p class="mt-2 nv-timeline-muted"><?= htmlspecialchars($event['description'], ENT_QUOTES) ?></p>                                     <?php endif; ?>                                 </div>                             <?php endif; ?>                         </div>                     <?php endforeach; ?>                 </div>             </div>         <?php endif; ?>     </div> </div>  <script>     (function () {         const rootId = <?= json_encode($timelineRootId, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT) ?>;          function initTimeline() {         const root = document.getElementById(rootId);         if (!root) {             return;         }          const scrollContainer = root.querySelector('.nv-timeline-scroll');         const scrollToEarliestVisible = () => {             if (!scrollContainer) {                 return;             }             const events = root.querySelectorAll('.nv-timeline-event');             for (const event of events) {                 const style = event.style;                 if (style.visibility === 'hidden' || style.opacity === '0') {                     continue;                 }                 const offset = Math.max(0, event.offsetTop - 80);                 scrollContainer.scrollTo({ top: offset, behavior: 'auto' });                 return;             }             scrollContainer.scrollTop = 0;         };         scrollToEarliestVisible();         requestAnimationFrame(scrollToEarliestVisible);         setTimeout(scrollToEarliestVisible, 200);          const toggles = root.querySelectorAll('.nv-timeline-toggle');         toggles.forEach((toggle) => {             const applyState = () => {                 const category = toggle.getAttribute('data-timeline-toggle');                 if (!category) {                     return;                 }                 const visible = toggle.checked;                 root.querySelectorAll('.nv-timeline-event[data-category="' + category + '"]').forEach((event) => {                     event.style.opacity = visible ? '1' : '0';                     event.style.pointerEvents = visible ? 'auto' : 'none';                     event.style.visibility = visible ? 'visible' : 'hidden';                     event.setAttribute('aria-hidden', visible ? 'false' : 'true');                 });                 requestAnimationFrame(scrollToEarliestVisible);             };                  toggle.addEventListener('change', applyState);                 applyState();             });         }          if (document.readyState === 'loading') {             document.addEventListener('DOMContentLoaded', initTimeline, { once: true });         } else {             initTimeline();         }     })(); </script>   


